Задача 1.

Да се дефинира клас String, предствящ низ с променлива дължина със следните функции и полета:

Полета:
 - Указател сочещ към динамично заделена памет(char*)
 - Дължина на низа (естествено число)

Функции:
- Конструктор за общо ползване - String(const char* str): Да се направи копие на подаденият низ
- Конструктор по подразбиране  - String() - Да се създава празен низ(вътрешният указател да не е нулев) с дължина 0
- Функции за достъп и промяна на полетата
  Функцията за достъп на полето, което се използва за записване на низа, да не връща копие на низа, а констанен указател към него

Задача 2:

1. Да се дефинира структура ServiceJob, представяща ремонт със следните функции и полета:

Полета:
 - Продължителност на ремонта (дробно число)
 - Tип на ремонта (изброим тип - примерни стойности: None, Maintenance, Engine, Suspension)

Функции:
- Конструктор за общо ползване
- Конструктор по подразбиране
- Статична функция double GetServiceJobPrice(const ServiceJob&), коятo по подаден ремонт връща неговата обща цена,
  изчислена по формула 'продължителност_на_ремонта * цена_за_тип_ремонт'

Примерни цени:

Тип на ремонт | Цена на час
     None     |    0.00 лв.
 Maintenance  |   10.00 лв.
    Engine    |   50.00 лв.

1. Да се дефинира клас ServiceEntry, представящ посещение при автосервиз със следните функции и полета:

Полета:
 - Име на собственик (поле от тип String)
 - Уникален идентификатор на посещението (естествено число, различно за всеки обект)
 - Регистрационен номер на автомобила (поле от тип String)
 - Марка автомобил (изброим тип, приемаме че ще работим само с определени  марки автомобили)
                    Примерни стойности: Subaru, Volkswagen, Renault, Nissan, BMW
 - Тип на клиента (изброим тип със следните стойности: частни клиенти, фирмени клиенти, клиенти с преференциални условия)
 - Списък с ремонтите извършени по време на това посещение в автосервиза(динамично заделен масив от тип ServiceJob)

Функции:
- Конструктор за общо ползване
- Конструктор по подразбиране
- Функции за достъп(getters) и промяна(setters) на полетата
- Функция GetTotalPrice(), която връща общо дължимата сума за всички извършени ремонти, като важат следните правила:
   - за частни клиенти има 5 процента отстъпка от цената за всички ремонти от тип_1
         Пример: всички ремонти за обслужване на автомобил са с 5 процента отстъпка
   - за фирмени клиенти има 5 процента отстъпка за всички ремонти от тип_1 и 10 процента за всички ремонти от тип_2
         Пример: всички ремонти по двигателят са с 5 процента отстъпка и всички ремонти по купето са с 10 процента отстъпка
   - за преференциални клиенти има 10 процента отстъпка за всички типове ремонти
- Функциия, която извжда информация за посещението:
  * Име на собственика
  * Идентификатор на посещението
  * Регистрационен номер на автомобила
  * Марката автомобил(като низ, а не като число)
  * Тип на клиента(като низ, а не като число)
  * Извършените ремонти при посещението в сервиза, като за всеки ремонт:
     # Пореден номер на ремонта (индексът му в масива с ремонти)
     # Тип на ремонта(като низ, а не като число)
     # Цена на ремонта, прилагайки правилата от горната подточка

1. Декларацията и дефиницията на всеки клас да е разделена съответно в .h и .cpp файл
2. Бонус точки за използване на елемнти от C++11 (enum class, nullptr и други), 
   писане на const член-функции и параметри на функции и използване на референции
3. Ако имате затруднение с реализацията на някоя част от задачите, прегледайте HomeWork_1_examples.cpp