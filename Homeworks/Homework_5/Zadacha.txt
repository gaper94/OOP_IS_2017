
Да се реализира шаблонен клас, наподобяващ std::map. Класът има два шаблонни
типа - тип на ключовете и тип на стойностите.

Към даден ключ може да е асоциирана единствена стойност.
Стойностите на ключовете трябва да са константни.

Класът трябва да поддържа следната базова функционалност:
  a) да може да съдържа произволен брой двойки ключ-стойност;
  b) да дава достъп до стойността, асоциирана с даден ключ;
  c) да дава възможност за добавяне на нова двойка ключ-стойност;
  d) да дава възможност за промяна на стойността, асоциирана с даден ключ;
  e) да дава зъвмощност за изтриване на двойка ключ-стойност по даден ключ.
  
За да се постигне тази функционалност, е необходимо да се имплементират следните
методи:
template <typename KEY_TYPE, typename VALUE_TYPE>
class Map
{
public:
// Ако съществува стойност, асоциирана с дадения ключ, то тази стойност се връща.
// В протвен случай, първо се добавя нова двойка, състояща се от дадения ключ и
// стойността по подразбиране на типа VALUE_TYPE,
// след което се прави същото - връща се стойността, асоциирана с тои ключ.
// Предефинрайки този оператор, постигаме b) и d), като това е и един от начините да постигнем c)
VALUE_TYPE& operator[] (const KEY_TYPE& key);

// Добавя се ключът с асоциираната към него стойност. 
// Ако такъв ключ вече съществува, неговата стойност се променя и става равна на дадената.
// Това е друг начин да постигнем c), както и d)
void add(const KEY_TYPE& key, const VALUE_TYPE& value);

// Премахва даденият ключ и асоциираната към него стойност, ако съществуват.
// Така постигаме e).
void remove(const KEY_TYPE& key);
//....
};

Освен тези методи, класът трябва да имплементира голямата четворка, както и да
съдържа метод, който да връща броя на двойките ключ-стойност, които текущо се
съдържат в Map-обекта (т.е. размера на Map-a).

Бележка : Изискването a) е основно и изпълнението му не трябва да се пропуска.
