// 1. Какво е override на функция ?
//  override е предефиниране на функция наследена от базов клас в наследник

#include <iostream>
class Foo
{
public:
    void Chunky()
    {
        std::cout << "Foo::Chunky" << std::endl;
    }
};

class Bar : public Foo
{
public:
    void Chunky()
    {
        std::cout << "Bar::Chunky" << std::endl;
    }
};

//  Защо не трябва да се предефинираме невритуални функции
// 2. Какво е полиморфизъм.
// 3. Статично свързване(early binding)
// 4. Средствата на С++ за полиморфизъм - виртуални функции, final и override
//    Статичен полиморфизъм  и динамичен полиморфизъм
// 5. Виртуални таблици и динамично свързване (dynamic binding)
// 6. Множествено наследяване - кога трябва и не трябва да го ползваме.
//    Виртуално наследяване и какви проблеми решава
// 7. Различни типове преобразувания
//   7.1 Преобразувания в С стил
//   7.2 static_cast<>()
//   7.3 reinterpret_cast<>()
//   7.4 const_cast<>()
//   7.5 dynamic_cast<>()
//   Защо трябва да ги предпочитаме пред преобразувания в С стил
// 8. Какво е абстрактен клас и кога трябва да използваме виртуални деструктори

int main()
{
    return 0;
}